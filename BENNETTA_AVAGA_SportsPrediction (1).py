{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40ef71e3-aed0-4fbd-96cf-d55e0210f81b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Demonstrate the data preparation & feature extraction proces"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cab6c066-bb4c-4fc2-b1a8-0b7d6f99d1cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "92b6b6b8-ed53-46d5-849b-7e6d81ffaf74",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "male_players_legacy = pd.read_csv(\"C:\\\\Users\\\\user\\\\Downloads\\\\male_players (legacy).csv\", low_memory = False)\n",
    "\n",
    "players_22 = pd.read_csv(\"C:\\\\Users\\\\user\\\\Downloads\\\\players_22.csv\", low_memory = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7f96abf9-5e12-4264-85c8-2b8fe518ee51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player_id</th>\n",
       "      <th>player_url</th>\n",
       "      <th>fifa_version</th>\n",
       "      <th>fifa_update</th>\n",
       "      <th>fifa_update_date</th>\n",
       "      <th>short_name</th>\n",
       "      <th>long_name</th>\n",
       "      <th>player_positions</th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>...</th>\n",
       "      <th>cdm</th>\n",
       "      <th>rdm</th>\n",
       "      <th>rwb</th>\n",
       "      <th>lb</th>\n",
       "      <th>lcb</th>\n",
       "      <th>cb</th>\n",
       "      <th>rcb</th>\n",
       "      <th>rb</th>\n",
       "      <th>gk</th>\n",
       "      <th>player_face_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>158023</td>\n",
       "      <td>/player/158023/lionel-messi/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>L. Messi</td>\n",
       "      <td>Lionel Andrés Messi Cuccittini</td>\n",
       "      <td>CF</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>...</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>62+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>45+3</td>\n",
       "      <td>54+3</td>\n",
       "      <td>15+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/158/023/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20801</td>\n",
       "      <td>/player/20801/c-ronaldo-dos-santos-aveiro/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Cristiano Ronaldo</td>\n",
       "      <td>Cristiano Ronaldo dos Santos Aveiro</td>\n",
       "      <td>LW, LM</td>\n",
       "      <td>92</td>\n",
       "      <td>92</td>\n",
       "      <td>...</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>63+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>52+3</td>\n",
       "      <td>57+3</td>\n",
       "      <td>16+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/020/801/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9014</td>\n",
       "      <td>/player/9014/arjen-robben/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>A. Robben</td>\n",
       "      <td>Arjen Robben</td>\n",
       "      <td>RM, LM, RW</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>64+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>46+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>14+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/009/014/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41236</td>\n",
       "      <td>/player/41236/zlatan-ibrahimovic/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>Z. Ibrahimović</td>\n",
       "      <td>Zlatan Ibrahimović</td>\n",
       "      <td>ST</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>65+3</td>\n",
       "      <td>65+3</td>\n",
       "      <td>61+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>55+3</td>\n",
       "      <td>56+3</td>\n",
       "      <td>17+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/041/236/15_120.png</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>167495</td>\n",
       "      <td>/player/167495/manuel-neuer/150002</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-18</td>\n",
       "      <td>M. Neuer</td>\n",
       "      <td>Manuel Peter Neuer</td>\n",
       "      <td>GK</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>...</td>\n",
       "      <td>40+3</td>\n",
       "      <td>40+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>38+3</td>\n",
       "      <td>36+3</td>\n",
       "      <td>87+3</td>\n",
       "      <td>https://cdn.sofifa.net/players/167/495/15_120.png</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 110 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   player_id                                        player_url  fifa_version  \\\n",
       "0     158023                /player/158023/lionel-messi/150002            15   \n",
       "1      20801  /player/20801/c-ronaldo-dos-santos-aveiro/150002            15   \n",
       "2       9014                  /player/9014/arjen-robben/150002            15   \n",
       "3      41236           /player/41236/zlatan-ibrahimovic/150002            15   \n",
       "4     167495                /player/167495/manuel-neuer/150002            15   \n",
       "\n",
       "   fifa_update fifa_update_date         short_name  \\\n",
       "0            2       2014-09-18           L. Messi   \n",
       "1            2       2014-09-18  Cristiano Ronaldo   \n",
       "2            2       2014-09-18          A. Robben   \n",
       "3            2       2014-09-18     Z. Ibrahimović   \n",
       "4            2       2014-09-18           M. Neuer   \n",
       "\n",
       "                             long_name player_positions  overall  potential  \\\n",
       "0       Lionel Andrés Messi Cuccittini               CF       93         95   \n",
       "1  Cristiano Ronaldo dos Santos Aveiro           LW, LM       92         92   \n",
       "2                         Arjen Robben       RM, LM, RW       90         90   \n",
       "3                   Zlatan Ibrahimović               ST       90         90   \n",
       "4                   Manuel Peter Neuer               GK       90         90   \n",
       "\n",
       "   ...   cdm   rdm   rwb    lb   lcb    cb   rcb    rb    gk  \\\n",
       "0  ...  62+3  62+3  62+3  54+3  45+3  45+3  45+3  54+3  15+3   \n",
       "1  ...  63+3  63+3  63+3  57+3  52+3  52+3  52+3  57+3  16+3   \n",
       "2  ...  64+3  64+3  64+3  55+3  46+3  46+3  46+3  55+3  14+3   \n",
       "3  ...  65+3  65+3  61+3  56+3  55+3  55+3  55+3  56+3  17+3   \n",
       "4  ...  40+3  40+3  36+3  36+3  38+3  38+3  38+3  36+3  87+3   \n",
       "\n",
       "                                     player_face_url  \n",
       "0  https://cdn.sofifa.net/players/158/023/15_120.png  \n",
       "1  https://cdn.sofifa.net/players/020/801/15_120.png  \n",
       "2  https://cdn.sofifa.net/players/009/014/15_120.png  \n",
       "3  https://cdn.sofifa.net/players/041/236/15_120.png  \n",
       "4  https://cdn.sofifa.net/players/167/495/15_120.png  \n",
       "\n",
       "[5 rows x 110 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "male_players_legacy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "11ac3253-b90a-467b-8410-0d5e1b9d0804",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['player_id', 'player_url', 'fifa_version', 'fifa_update',\n",
       "       'fifa_update_date', 'short_name', 'long_name', 'player_positions',\n",
       "       'overall', 'potential',\n",
       "       ...\n",
       "       'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb', 'gk',\n",
       "       'player_face_url'],\n",
       "      dtype='object', length=110)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking for the number of columns in the dataframe.\n",
    "male_players_legacy.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4927b415-77ac-48e0-9714-640d540d4771",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "player_id           0\n",
      "player_url          0\n",
      "fifa_version        0\n",
      "fifa_update         0\n",
      "fifa_update_date    0\n",
      "                   ..\n",
      "cb                  0\n",
      "rcb                 0\n",
      "rb                  0\n",
      "gk                  0\n",
      "player_face_url     0\n",
      "Length: 84, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Cleaning up the independent dataset\n",
    "\n",
    "# Remove duplicates (if any)\n",
    "male_players_legacy = male_players_legacy.drop_duplicates()\n",
    "\n",
    "# Checking for missing values\n",
    "missing_values = male_players_legacy.isnull().sum()\n",
    "\n",
    "# Dropping columns with missing values \n",
    "male_players_legacy_cleaned = male_players_legacy.dropna(axis=1, how='any')\n",
    "\n",
    "# Checking the cleaned DataFrame for confirmation\n",
    "cleaned_missing_values = male_players_legacy_cleaned.isnull().sum()\n",
    "print(cleaned_missing_values)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "92fcecc8-ba83-4beb-b24c-13503bc74bd5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['player_id', 'player_url', 'fifa_version', 'fifa_update',\n",
       "       'fifa_update_date', 'short_name', 'long_name', 'player_positions',\n",
       "       'overall', 'potential', 'age', 'dob', 'height_cm', 'weight_kg',\n",
       "       'nationality_id', 'nationality_name', 'preferred_foot', 'weak_foot',\n",
       "       'skill_moves', 'international_reputation', 'work_rate', 'body_type',\n",
       "       'real_face', 'attacking_crossing', 'attacking_finishing',\n",
       "       'attacking_heading_accuracy', 'attacking_short_passing',\n",
       "       'attacking_volleys', 'skill_dribbling', 'skill_curve',\n",
       "       'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control',\n",
       "       'movement_acceleration', 'movement_sprint_speed', 'movement_agility',\n",
       "       'movement_reactions', 'movement_balance', 'power_shot_power',\n",
       "       'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots',\n",
       "       'mentality_aggression', 'mentality_interceptions',\n",
       "       'mentality_positioning', 'mentality_vision', 'mentality_penalties',\n",
       "       'defending_marking_awareness', 'defending_standing_tackle',\n",
       "       'defending_sliding_tackle', 'goalkeeping_diving',\n",
       "       'goalkeeping_handling', 'goalkeeping_kicking',\n",
       "       'goalkeeping_positioning', 'goalkeeping_reflexes', 'ls', 'st', 'rs',\n",
       "       'lw', 'lf', 'cf', 'rf', 'rw', 'lam', 'cam', 'ram', 'lm', 'lcm', 'cm',\n",
       "       'rcm', 'rm', 'lwb', 'ldm', 'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb',\n",
       "       'rcb', 'rb', 'gk', 'player_face_url'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "male_players_legacy_cleaned.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cd1ba5c9-dc51-4085-b4eb-ea0590cc820f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. Create feature subsets that show maximum correlation with the dependent variable. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6e51bd27-d4b1-441b-b3aa-1c43e40b900e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature Extraction\n",
    "# Example: Creating a new feature 'age_group'\n",
    "#male_players_legacy_cleaned.loc[:, 'age_group'] = pd.cut(male_players_legacy_cleaned['age'], bins=[0, 20, 30, 40, 100], labels=['<20', '20-30', '30-40', '40+'])\n",
    "\n",
    "# Selecting relevant features\n",
    "relevant_features = [ 'long_name', 'player_positions','overall', 'potential', 'age','skill_moves','power_stamina', 'power_strength',\n",
    "'mentality_aggression', 'mentality_interceptions']\n",
    "\n",
    "feature_data = male_players_legacy_cleaned[relevant_features]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "68d4c0ea-6b3c-4043-b83b-65eaf81127d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize features\n",
    "\n",
    "# Check for non-numeric values in numerical features\n",
    "numerical_features = relevant_features[2::]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7bbaf5db-7898-479f-896d-3a4252086a01",
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_features = relevant_features[0:2]\n",
    "\n",
    "# One-hot encoding\n",
    "one_hot_encoded_df = pd.get_dummies(categorical_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d08483ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall</th>\n",
       "      <th>potential</th>\n",
       "      <th>age</th>\n",
       "      <th>skill_moves</th>\n",
       "      <th>power_stamina</th>\n",
       "      <th>power_strength</th>\n",
       "      <th>mentality_aggression</th>\n",
       "      <th>mentality_interceptions</th>\n",
       "      <th>overall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>overall</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.695362</td>\n",
       "      <td>0.458390</td>\n",
       "      <td>0.330951</td>\n",
       "      <td>0.360025</td>\n",
       "      <td>0.350786</td>\n",
       "      <td>0.398310</td>\n",
       "      <td>0.314282</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>potential</th>\n",
       "      <td>0.695362</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.201506</td>\n",
       "      <td>0.285126</td>\n",
       "      <td>0.212416</td>\n",
       "      <td>0.099452</td>\n",
       "      <td>0.197977</td>\n",
       "      <td>0.163596</td>\n",
       "      <td>0.695362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>0.458390</td>\n",
       "      <td>-0.201506</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.030409</td>\n",
       "      <td>0.102691</td>\n",
       "      <td>0.333180</td>\n",
       "      <td>0.259104</td>\n",
       "      <td>0.192084</td>\n",
       "      <td>0.458390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>skill_moves</th>\n",
       "      <td>0.330951</td>\n",
       "      <td>0.285126</td>\n",
       "      <td>0.030409</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.513908</td>\n",
       "      <td>-0.069219</td>\n",
       "      <td>0.299770</td>\n",
       "      <td>0.145488</td>\n",
       "      <td>0.330951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>power_stamina</th>\n",
       "      <td>0.360025</td>\n",
       "      <td>0.212416</td>\n",
       "      <td>0.102691</td>\n",
       "      <td>0.513908</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.256903</td>\n",
       "      <td>0.647703</td>\n",
       "      <td>0.575470</td>\n",
       "      <td>0.360025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>power_strength</th>\n",
       "      <td>0.350786</td>\n",
       "      <td>0.099452</td>\n",
       "      <td>0.333180</td>\n",
       "      <td>-0.069219</td>\n",
       "      <td>0.256903</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.461303</td>\n",
       "      <td>0.344996</td>\n",
       "      <td>0.350786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mentality_aggression</th>\n",
       "      <td>0.398310</td>\n",
       "      <td>0.197977</td>\n",
       "      <td>0.259104</td>\n",
       "      <td>0.299770</td>\n",
       "      <td>0.647703</td>\n",
       "      <td>0.461303</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.745386</td>\n",
       "      <td>0.398310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mentality_interceptions</th>\n",
       "      <td>0.314282</td>\n",
       "      <td>0.163596</td>\n",
       "      <td>0.192084</td>\n",
       "      <td>0.145488</td>\n",
       "      <td>0.575470</td>\n",
       "      <td>0.344996</td>\n",
       "      <td>0.745386</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.314282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>overall</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.695362</td>\n",
       "      <td>0.458390</td>\n",
       "      <td>0.330951</td>\n",
       "      <td>0.360025</td>\n",
       "      <td>0.350786</td>\n",
       "      <td>0.398310</td>\n",
       "      <td>0.314282</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          overall  potential       age  skill_moves  \\\n",
       "overall                  1.000000   0.695362  0.458390     0.330951   \n",
       "potential                0.695362   1.000000 -0.201506     0.285126   \n",
       "age                      0.458390  -0.201506  1.000000     0.030409   \n",
       "skill_moves              0.330951   0.285126  0.030409     1.000000   \n",
       "power_stamina            0.360025   0.212416  0.102691     0.513908   \n",
       "power_strength           0.350786   0.099452  0.333180    -0.069219   \n",
       "mentality_aggression     0.398310   0.197977  0.259104     0.299770   \n",
       "mentality_interceptions  0.314282   0.163596  0.192084     0.145488   \n",
       "overall                  1.000000   0.695362  0.458390     0.330951   \n",
       "\n",
       "                         power_stamina  power_strength  mentality_aggression  \\\n",
       "overall                       0.360025        0.350786              0.398310   \n",
       "potential                     0.212416        0.099452              0.197977   \n",
       "age                           0.102691        0.333180              0.259104   \n",
       "skill_moves                   0.513908       -0.069219              0.299770   \n",
       "power_stamina                 1.000000        0.256903              0.647703   \n",
       "power_strength                0.256903        1.000000              0.461303   \n",
       "mentality_aggression          0.647703        0.461303              1.000000   \n",
       "mentality_interceptions       0.575470        0.344996              0.745386   \n",
       "overall                       0.360025        0.350786              0.398310   \n",
       "\n",
       "                         mentality_interceptions   overall  \n",
       "overall                                 0.314282  1.000000  \n",
       "potential                               0.163596  0.695362  \n",
       "age                                     0.192084  0.458390  \n",
       "skill_moves                             0.145488  0.330951  \n",
       "power_stamina                           0.575470  0.360025  \n",
       "power_strength                          0.344996  0.350786  \n",
       "mentality_aggression                    0.745386  0.398310  \n",
       "mentality_interceptions                 1.000000  0.314282  \n",
       "overall                                 0.314282  1.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate correlation matrix\n",
    "correlation_matrix = male_players_legacy[numerical_features + ['overall']].corr()\n",
    "correlation_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c3f64880-9287-42ef-b6f0-2af49773bcc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot a heatmap of the correlation matrix\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap = 'plasma')\n",
    "plt.title('Correlation Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0375241b-d3f0-4b0c-827c-cf502fb4045f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3. Create and train a suitable machine learning model with cross-validation that can predict a player's rating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "551a6cac-12fd-4c30-b183-a3a3f2ce87cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Concatenate the one-hot encoded DataFrame with the original feature_data DataFrame\n",
    "feature_data = pd.concat([one_hot_encoded_df, feature_data], axis=1)\n",
    "\n",
    "# Drop specified columns from feature_data\n",
    "feature_data.drop(columns=categorical_features, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b51c39b3-b514-4207-8a8e-e4ade34398ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NaN values in x: 0\n",
      "NaN values in y: 0\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "# Define the target and feature variables\n",
    "y = feature_data['overall']  # Target variable\n",
    "x = feature_data.drop(columns=['overall'])  # Features\n",
    "\n",
    "# Drop rows with NaN values in x and align y accordingly\n",
    "x = x.dropna()\n",
    "y = y[x.index]\n",
    "\n",
    "\n",
    "# Verify no NaN values remain in x and y before splitting\n",
    "print(\"NaN values in x:\", x.isnull().sum().sum())\n",
    "print(\"NaN values in y:\", y.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ffa72f54-8d85-4c9c-9d74-dff2a544e254",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "96aee295-5375-4a28-843c-1c88d393c619",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt=DecisionTreeClassifier(criterion='entropy')\n",
    "knn=KNeighborsClassifier(n_neighbors=7)\n",
    "sv=SVC(probability=True)\n",
    "nb=GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbc8baca-00c8-4d68-a8fd-a43f19d0a429",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classes in Y_test: [44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67\n",
      " 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91\n",
      " 92 93 94]\n",
      "Classes in model: [40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\n",
      " 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87\n",
      " 88 89 90 91 92 93 94]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classes in Y_test: [44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67\n",
      " 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91\n",
      " 92 93 94]\n",
      "Classes in model: [40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\n",
      " 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87\n",
      " 88 89 90 91 92 93 94]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\user\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, roc_auc_score, auc\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "import numpy as np\n",
    "\n",
    "# Assuming X and Y are already defined\n",
    "# X, Y = ...\n",
    "\n",
    "# Split the dataset into training and testing sets\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize the models\n",
    "dt = DecisionTreeClassifier(criterion='entropy')\n",
    "knn = KNeighborsClassifier(n_neighbors=7)\n",
    "sv = SVC(probability=True)\n",
    "nb = GaussianNB()\n",
    "\n",
    "# List of models\n",
    "models = [dt, knn, sv, nb]\n",
    "\n",
    "# Dictionary to store the results\n",
    "results = {}\n",
    "\n",
    "# Train and evaluate each model\n",
    "for model in models:\n",
    "    # Perform cross-validation\n",
    "    cv_scores = cross_val_score(model, X_train, Y_train, cv=5, scoring='accuracy')\n",
    "    model.fit(X_train, Y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    # Calculate ROC AUC score if model supports predict_proba\n",
    "    if hasattr(model, \"predict_proba\"):\n",
    "        try:\n",
    "            if len(np.unique(Y_test)) == model.classes_.shape[0]:  # Check if classes match\n",
    "                if len(np.unique(Y_test)) > 2:  # Multi-class scenario\n",
    "                    roc_auc = roc_auc_score(Y_test, model.predict_proba(X_test), multi_class='ovr')\n",
    "                else:  # Binary classification\n",
    "                    roc_auc = roc_auc_score(Y_test, model.predict_proba(X_test)[:, 1])\n",
    "            else:\n",
    "                print(f\"Classes in Y_test: {np.unique(Y_test)}\")\n",
    "                print(f\"Classes in model: {model.classes_}\")\n",
    "                roc_auc = \"N/A\"  # Handle the mismatch gracefully\n",
    "        except ValueError as e:\n",
    "            print(f\"Error calculating ROC AUC: {e}\")\n",
    "            roc_auc = \"N/A\"  # Handle errors during calculation\n",
    "    else:\n",
    "        roc_auc = \"N/A\"  # For models that do not support predict_proba\n",
    "    \n",
    "    # Store the results\n",
    "    results[model.__class__.__name__] = {\n",
    "        'Cross-Val Accuracy': np.mean(cv_scores),\n",
    "        'Confusion Matrix': confusion_matrix(Y_test, y_pred),\n",
    "        'Classification Report': classification_report(Y_test, y_pred),\n",
    "        'ROC AUC Score': roc_auc\n",
    "    }\n",
    "\n",
    "# Print the results\n",
    "for model_name, metrics in results.items():\n",
    "    print(f\"Model: {model_name}\")\n",
    "    print(f\"Cross-Val Accuracy: {metrics['Cross-Val Accuracy']}\")\n",
    "    print(\"Confusion Matrix:\")\n",
    "    print(metrics['Confusion Matrix'])\n",
    "    print(\"Classification Report:\")\n",
    "    print(metrics['Classification Report'])\n",
    "    print(f\"ROC AUC Score: {metrics['ROC AUC Score']}\")\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fba893a2-12d4-48a5-ba9a-b0a596393818",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fine tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53d62651-83cb-4eae-9ba4-bab11bb23673",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Initialize the Random Forest Classifier\n",
    "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "# Train the model\n",
    "rf.fit(X_train, Y_train)\n",
    "\n",
    "# Predictions\n",
    "y_pred_rf = rf.predict(X_test)\n",
    "\n",
    "# Evaluate the model\n",
    "accuracy_rf = accuracy_score(Y_test, y_pred_rf)\n",
    "roc_auc_rf = roc_auc_score(Y_test, rf.predict_proba(X_test), multi_class='ovr')\n",
    "\n",
    "print(f\"Random Forest Accuracy: {accuracy_rf}\")\n",
    "print(f\"Random Forest ROC AUC Score: {roc_auc_rf}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0ef98a5-4130-45f6-bb84-b643becc3b37",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "# Initialize the Gradient Boosting Classifier\n",
    "gb = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, random_state=42)\n",
    "\n",
    "# Train the model\n",
    "gb.fit(X_train, Y_train)\n",
    "\n",
    "# Predictions\n",
    "y_pred_gb = gb.predict(X_test)\n",
    "\n",
    "# Evaluate the model\n",
    "accuracy_gb = accuracy_score(Y_test, y_pred_gb)\n",
    "roc_auc_gb = roc_auc_score(Y_test, gb.predict_proba(X_test), multi_class='ovr')\n",
    "\n",
    "print(f\"Gradient Boosting Accuracy: {accuracy_gb}\")\n",
    "print(f\"Gradient Boosting ROC AUC Score: {roc_auc_gb}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7175d90f-ac7f-4bda-b35d-02c205724d8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Define the parameter grid\n",
    "param_grid_rf = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'max_depth': [None, 10, 20],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "\n",
    "# Initialize the Random Forest Classifier\n",
    "rf = RandomForestClassifier(random_state=42)\n",
    "\n",
    "# Grid search with cross-validation\n",
    "grid_search_rf = GridSearchCV(estimator=rf, param_grid=param_grid_rf, cv=5, scoring='accuracy', verbose=1)\n",
    "grid_search_rf.fit(X_train, Y_train)\n",
    "\n",
    "# Best parameters and best score\n",
    "print(\"Best Parameters for Random Forest:\")\n",
    "print(grid_search_rf.best_params_)\n",
    "print(\"Best Cross-Validation Score:\", grid_search_rf.best_score_)\n",
    "\n",
    "# Evaluate on the test set\n",
    "best_rf = grid_search_rf.best_estimator_\n",
    "y_pred_rf = best_rf.predict(X_test)\n",
    "accuracy_rf = accuracy_score(Y_test, y_pred_rf)\n",
    "roc_auc_rf = roc_auc_score(Y_test, best_rf.predict_proba(X_test), multi_class='ovr')\n",
    "\n",
    "print(f\"Random Forest Accuracy (Test Set): {accuracy_rf}\")\n",
    "print(f\"Random Forest ROC AUC Score (Test Set): {roc_auc_rf}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3725499a-4255-4755-9882-8747e787a666",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use the data from another season(players_22) which was not used during the training to test how good is the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8f3c8a8-0cb6-4215-95c9-b890f68bf027",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make predictions using Random Forest\n",
    "y_pred_rf_players_22 = best_rf.predict(players_22)\n",
    "\n",
    "# Make predictions using Gradient Boosting\n",
    "y_pred_gb_players_22 = best_gb.predict(players_22)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bb8659e-5dd4-486a-ba88-4d85c4bc0394",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Evaluate Random Forest\n",
    "accuracy_rf_players_22 = accuracy_score(Y_players_22, y_pred_rf_players_22)\n",
    "roc_auc_rf_players_22 = roc_auc_score(Y_players_22, best_rf.predict_proba(X_players_22), multi_class='ovr')\n",
    "\n",
    "print(f\"Random Forest Accuracy (players_22): {accuracy_rf_players_22}\")\n",
    "print(f\"Random Forest ROC AUC Score (players_22): {roc_auc_rf_players_22}\")\n",
    "\n",
    "# Evaluate Gradient Boosting\n",
    "accuracy_gb_players_22 = accuracy_score(Y_players_22, y_pred_gb_players_22)\n",
    "roc_auc_gb_players_22 = roc_auc_score(Y_players_22, best_gb.predict_proba(X_players_22), multi_class='ovr')\n",
    "\n",
    "print(f\"Gradient Boosting Accuracy (players_22): {accuracy_gb_players_22}\")\n",
    "print(f\"Gradient Boosting ROC AUC Score (players_22): {roc_auc_gb_players_22}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
